# -*- coding: utf-8 -*-
"""EDA & only BOW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1En6MI9iIFpb1dU5HdbofqGg2TOl5ZiXQ
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("/content/questions.csv")
df.shape

df.sample(10)

"""**Basic EDA**"""

df.info()

# missing values
df.isnull().sum()

# duplicate rows
df.duplicated().sum()

# Distribution of duplicate and non-duplicate questions

print(df['is_duplicate'].value_counts())
print((df['is_duplicate'].value_counts()/df['is_duplicate'].count())*100)
df['is_duplicate'].value_counts().plot(kind='bar')

# Repeated Questions
qid = pd.Series(df['qid1'].tolist() + df['qid2'].to_list())
print('Number of unique questions', np.unique(qid).shape[0])
x = qid.value_counts()>1
print('Number of questions getting repeated', x[x].shape[0])

# Repeated questionshistogram

plt.hist(qid.value_counts().values, bins=160)
plt.yscale('log')
plt.xlabel('Number of times a question is repeated')
plt.ylabel('Number of questions')
plt.show()

"""**Only BOW**"""

new_df = df.sample(30000, random_state=2)

new_df.isnull().sum()

new_df.duplicated().sum()

ques_df = new_df[['question1', 'question2']]
ques_df.head()

from sklearn.feature_extraction.text import CountVectorizer
# merge texts
questions = list(ques_df['question1']) + list(ques_df['question2'])
cv = CountVectorizer(max_features=5000)
q1_arr, q2_arr = np.vsplit(cv.fit_transform(questions).toarray(), 2)

temp_df1 = pd.DataFrame(q1_arr, index= ques_df.index)
temp_df2 = pd.DataFrame(q2_arr, index= ques_df.index)
temp_df = pd.concat([temp_df1, temp_df2], axis=1)
temp_df.shape

temp_df

temp_df['is_duplicate'] = new_df['is_duplicate']

temp_df.head()

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(temp_df.iloc[:,0:-1].values,temp_df.iloc[:,-1].values,test_size=0.2,random_state=1)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
rf = RandomForestClassifier()
rf.fit(X_train,y_train)
y_pred = rf.predict(X_test)
accuracy_score(y_test,y_pred)

from xgboost import XGBClassifier
xgb = XGBClassifier()
xgb.fit(X_train,y_train)
y_pred = xgb.predict(X_test)
accuracy_score(y_test,y_pred)